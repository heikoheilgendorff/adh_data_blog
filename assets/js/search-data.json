{
  
    
        "post0": {
            "title": "PDF Data Extraction with Python (almost complete)",
            "content": "Extracting data from PDFs using Tabula . Data extraction from a PDF document can be an incredibly arduous task. It may not be too bad when it is required as a once-off task, but when the process needs to be repeated many times over, it can be truly crushing. Working with data in a PDF data is difficult because the data is formatted differently to how it is in a spreadsheet. This means that before we can work with and manipulate the data, we must extract it from the PDF, correct any misalignments and format interpretation errors, and then store it in a more data-friendly format like a csv or xlsx spreadsheet. One advantage when working with formal reports that have been published in PDF format is that they are typically consistently structured, with only the content changing. Thus we are often able to construct an automated process for extracting data from PDF tables, which can really help when extracting data from many files. In this tutorial, we will demonstrate how to use a python module called Tabula. Tabula allows you to pull data from a PDF and load it into a Pandas dataframe. It is important to note that this is only the first part of the PDF data extraction process. Once the data is in a dataframe, it then needs to be cleaned and arranged in a manner that is consistent across all datasets, before being stored. In this tutorial, we will only focus on the initial extraction process, using Tabula. . Getting Started . In order to follow along with this tutorial, a basic understanding of the Python programming language and Python Environments is considered to be read. You will need to have Python installed, along with the Tabula module which can be downloaded using pip or Anaconda. For this tutorial, we have used this PDF file. . import tabula import pandas as pd import glob . Say we wish to extract &quot;Table 1 - Consumer price indices for the total country&quot;, as seen below: . tables = tabula.read_pdf(&#39;./data/pdf_extraction/p0141june2022_tables.pdf&#39;, pages=&quot;all&quot;) . This will cause Tabula to parse the entire PDF document and extract all of the tables that it identifies, returning them in a list that we have called tables. We can reduce runtime by specifying which pages of the document to look for. In this case, Table 1 can be found on pages 3 and 4. . tables = tabula.read_pdf(&#39;./data/pdf_extraction/p0141june2022_tables.pdf&#39;, pages=(3,4)) . We can also specify whether Tabula should identify rows and columns with white space or lines, by specifying stream or lattice = True. In my experience thus far, stream typically provides better results. . tables = tabula.read_pdf(&#39;./data/pdf_extraction/p0141june2022_tables.pdf&#39;, pages=(3,4), stream=True) . Once we have our list of tables, we can access the appropriate table from the list. Note, that the table we&#39;re interested in, Table 1, is split across two pages. Tabula will treat this as two separate tables, so in order to access Table 1, we will need to pull the first two tables from the list. . df_1 = tables[0] df_2 = tables[1] . We have now extracted the data for Table 1 from the PDF and have it in a Pandas dataframe. From here the data can be cleaned and processed as required. . In some cases, Tabula is not automatically able to identify the table that you wish to extract. In this case, it is necessary to specify the area of the page that you are interested in. The easiest way to locate the appropriate page coordinates is to open Tabula in your browser, upload the pdf document and then manaually select the area of the table of interest via click and drag with your mouse. You have to download and install the Tabula tool from here and note, this is separate from the Tabula module that you have installed with Python. Once you have selected your table area, you can export it as a script. Open the script in any text editor and you will see something like this: . java -jar tabula-java.jar -a 143.249,62.261,670.851,546.702 -p 3 &quot;$1&quot; . Copy the numbers: 143.249,62.261,670.851,546.702 and include them in your python command as follows: . tables = tabula.read_pdf(&#39;./data/pdf_extraction/p0141june2022_tables.pdf&#39;, pages=(3,4), stream=True, area=(143.249,62.261,670.851,546.702)) . You can specify the same area over multiple pages if necessary. When extracting data from multiple reports that follow the same structure, it might be a good idea to include a bit of white space around the table when making your area selection, as different reports may have the tables in slightly different parts of the page. . Conclusion . In this tutorial, we have shown you how to extract data from a PDF document using a Python module called Tabula. We have used this method very successfully in extracting data from many African country Consumer Price Index reports in order to produce our Inflation database, which is used to service the ADH African Inflation observer. .",
            "url": "https://heikoheilgendorff.github.io/adh_data_blog/python/tutorial/data/2022/10/04/PDF_Data_Extraction_with_Python.html",
            "relUrl": "/python/tutorial/data/2022/10/04/PDF_Data_Extraction_with_Python.html",
            "date": " • Oct 4, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Exploring the WHO's Malaria data (complete)",
            "content": "The World Health Organization (WHO) has some interesting datasets on Malaria. We have linked some of them in the ADH CKAN data repository. In this blog post, we provide a quicklook tool to showcase the information available in this data. This post is coded in Jupyter Notebook and if you are interested, you can view the code by clicking Show Code. . import altair as alt import pandas as pd import requests import json import matplotlib.pyplot as plt import math . . Get the data . The following datasets have been used in this post: . Estimated Malaria Deaths | Estimated Malaria Cases | . # get the data def get_data(data_id): r = requests.request(&#39;GET&#39;, &#39;https://ckan.africadatahub.org/api/3/action/datastore_search?resource_id=%s&amp;limit=5000&#39;%(data_id)) c = json.loads(r.content) df = pd.json_normalize(c[&#39;result&#39;][&#39;records&#39;]) #print(df.head(10)) #print(df.Indicator.drop_duplicates()) return df df_deaths = get_data(data_id_deaths) df_cases = get_data(data_id_cases) . . These datasets have 2344 rows with 35 columns each. We&#39;re only interested in a few columns and we&#39;re also only interested in African countries, so we can select the countries and columns as follows. . def cut_data(df): df = df[df.ParentLocation==&#39;Africa&#39;] cols = [&#39;SpatialDimValueCode&#39;, &#39;Location&#39;,&#39;Indicator&#39;,&#39;Period&#39;,&#39;FactValueNumeric&#39;,&#39;FactValueNumericLow&#39;,&#39;FactValueNumericHigh&#39;,&#39;DateModified&#39;] df = df.loc[:,cols] df = df.rename(columns={&#39;FactValueNumeric&#39;:&#39;value&#39;,&#39;FactValueNumericLow&#39;:&#39;low_bound&#39;,&#39;FactValueNumericHigh&#39;:&#39;up_bound&#39;}) print(&quot;New shape: {}&quot;.format(df.shape)) return df df_deaths = cut_data(df_deaths) df_cases = cut_data(df_cases) . . New shape: (927, 8) New shape: (927, 8) . Let&#39;s combine these datasets and explore the data . df = pd.merge(df_deaths,df_cases,on=[&#39;SpatialDimValueCode&#39;,&#39;Location&#39;,&#39;Period&#39;],suffixes=(&quot;_deaths&quot;,&quot;_cases&quot;)) . . #%% create filters locations = df.Location.unique() locations = list(filter(lambda d: d is not None, locations)) # filter out None values locations.sort() # sort alphabetically demo_labels = locations.copy() input_dropdown = alt.binding_select(options=locations, name=&#39;Select country&#39;,labels=demo_labels) selection = alt.selection_single(fields=[&#39;Location&#39;], bind=input_dropdown,init={&#39;Location&#39;:&#39;Kenya&#39;}) . . # Deaths w = 330 # width h = 280 # height title = alt.TitleParams(&#39;Estimated number of deaths due to Malaria in Selected Country&#39;, anchor=&#39;middle&#39;) line = alt.Chart(df,title=title).mark_line().encode( alt.X(&#39;Period:O&#39;,title=&#39;Year&#39;), # :O tells altair that the data is ordinal alt.Y(&#39;value_deaths&#39;,title=&#39;Number of Deaths&#39;) ).properties( width=w, height=h ) #line.show() point = alt.Chart(df).mark_area(opacity=0.3).encode( alt.X(&#39;Period:O&#39;), alt.Y(&#39;low_bound_deaths&#39;), alt.Y2(&#39;up_bound_deaths&#39;), tooltip=[&#39;Period&#39;,&#39;low_bound_deaths&#39;,&#39;value_deaths&#39;,&#39;up_bound_deaths&#39;] ).properties( width=w, height=h ).interactive() # cases title = alt.TitleParams(&#39;Estimated number of cases of Malaria in Selected Country&#39;, anchor=&#39;middle&#39;) line2 = alt.Chart(df,title=title).mark_line().encode( alt.X(&#39;Period:O&#39;,title=&#39;Year&#39;), # :O tells altair that the data is ordinal alt.Y(&#39;value_cases&#39;,title=&#39;Number of Cases&#39;) ).properties( width=w, height=h ) #line.show() point2 = alt.Chart(df).mark_area(opacity=0.3).encode( alt.X(&#39;Period:O&#39;), alt.Y(&#39;low_bound_cases&#39;), alt.Y2(&#39;up_bound_cases&#39;), tooltip=[&#39;Period&#39;,&#39;low_bound_cases&#39;,&#39;value_cases&#39;,&#39;up_bound_cases&#39;] ).properties( width=w, height=h ).interactive() # combine plots x = line + point | line2 + point2 x = x.add_selection( selection ).transform_filter( selection ) x.save(&#39;chart.html&#39;) x . .",
            "url": "https://heikoheilgendorff.github.io/adh_data_blog/jupyter/malaria/who/data/quicklook/2022/08/12/Malaria_blog_post_altair.html",
            "relUrl": "/jupyter/malaria/who/data/quicklook/2022/08/12/Malaria_blog_post_altair.html",
            "date": " • Aug 12, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post (NOT For Publishing)",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://heikoheilgendorff.github.io/adh_data_blog/jupyter/2020/02/20/fastpages.html",
            "relUrl": "/jupyter/2020/02/20/fastpages.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post (NOT For Publishing)",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://heikoheilgendorff.github.io/adh_data_blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About This Blog",
          "content": "This blog is a staging point for blog posts on the ADH website. We use this blog as a place to post first drafts of our data blogs, which are created from Jupyter notebooks. This website is powered by fastpages, a blogging platform that natively supports Jupyter notebooks in addition to other formats. From here, we rework the output into Webflow using embeded HTML and then publish on our website. If you have reached this website accidentally, please navigate to https://www.africadatahub.org/ to view the final versions of these posts. .",
          "url": "https://heikoheilgendorff.github.io/adh_data_blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://heikoheilgendorff.github.io/adh_data_blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}