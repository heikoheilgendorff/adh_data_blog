{
  
    
        "post0": {
            "title": "Maps with folium",
            "content": "import folium import pandas as pd import geopandas as gpd import altair as alt import numpy as np from IPython.core.display import HTML #import topojson as tp #alt.renderers.enable(&#39;altair_viewer&#39;) alt.data_transformers.disable_max_rows() . DataTransformerRegistry.enable(&#39;default&#39;) . m = folium.Map(location=[45.5236, -122.6750]) . HTML(&#39;&lt;span style=&quot;color:#565656&quot;&gt;Make this Notebook Trusted to load map: File -&amp;gt; Trust Notebook&lt;/span&gt;&#39;) m . Make this Notebook Trusted to load map: File -&gt; Trust Notebook %%html &lt;div class=&quot;output_wrapper&quot;&gt;&lt;div class=&quot;out_prompt_overlay prompt&quot; title=&quot;click to scroll output; double click to hide&quot;&gt;&lt;/div&gt;&lt;div class=&quot;output&quot;&gt;&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;run_this_cell&quot;&gt;&lt;/div&gt;&lt;div class=&quot;prompt output_prompt&quot;&gt;&lt;bdi&gt;Out[3]:&lt;/bdi&gt;&lt;/div&gt;&lt;div class=&quot;output_subarea output_html rendered_html output_result&quot; dir=&quot;auto&quot;&gt;&lt;div style=&quot;width:100%;&quot;&gt;&lt;div style=&quot;position:relative;width:100%;height:0;padding-bottom:60%;&quot;&gt;&lt;span style=&quot;color:#565656&quot;&gt;Make this Notebook Trusted to load map: File -&amp;gt; Trust Notebook&lt;/span&gt;&lt;iframe srcdoc=&quot;&lt;!DOCTYPE html&gt; &lt;head&gt; &lt;meta http-equiv=&amp;quot;content-type&amp;quot; content=&amp;quot;text/html; charset=UTF-8&amp;quot; /&gt; &lt;script&gt; L_NO_TOUCH = false; L_DISABLE_3D = false; &lt;/script&gt; &lt;style&gt;html, body {width: 100%;height: 100%;margin: 0;padding: 0;}&lt;/style&gt; &lt;style&gt;#map {position:absolute;top:0;bottom:0;right:0;left:0;}&lt;/style&gt; &lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/leaflet@1.6.0/dist/leaflet.js&amp;quot;&gt;&lt;/script&gt; &lt;script src=&amp;quot;https://code.jquery.com/jquery-1.12.4.min.js&amp;quot;&gt;&lt;/script&gt; &lt;script src=&amp;quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js&amp;quot;&gt;&lt;/script&gt; &lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&amp;quot;&gt;&lt;/script&gt; &lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://cdn.jsdelivr.net/npm/leaflet@1.6.0/dist/leaflet.css&amp;quot;/&gt; &lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css&amp;quot;/&gt; &lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap-theme.min.css&amp;quot;/&gt; &lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://maxcdn.bootstrapcdn.com/font-awesome/4.6.3/css/font-awesome.min.css&amp;quot;/&gt; &lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&amp;quot;/&gt; &lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&amp;quot;/&gt; &lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no&amp;quot; /&gt; &lt;style&gt; #map_d2d98c7d3a1b4162d4b8d810c4765922 { position: relative; width: 100.0%; height: 100.0%; left: 0.0%; top: 0.0%; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&amp;quot;folium-map&amp;quot; id=&amp;quot;map_d2d98c7d3a1b4162d4b8d810c4765922&amp;quot; &gt;&lt;/div&gt; &lt;/body&gt; &lt;script&gt; var map_d2d98c7d3a1b4162d4b8d810c4765922 = L.map( &amp;quot;map_d2d98c7d3a1b4162d4b8d810c4765922&amp;quot;, { center: [45.5236, -122.675], crs: L.CRS.EPSG3857, zoom: 10, zoomControl: true, preferCanvas: false, } ); var tile_layer_f53173e07ac779f4576c9e29770506d6 = L.tileLayer( &amp;quot;https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&amp;quot;, {&amp;quot;attribution&amp;quot;: &amp;quot;Data by u0026copy; u003ca href= &amp;quot;http://openstreetmap.org &amp;quot; u003eOpenStreetMap u003c/a u003e, under u003ca href= &amp;quot;http://www.openstreetmap.org/copyright &amp;quot; u003eODbL u003c/a u003e.&amp;quot;, &amp;quot;detectRetina&amp;quot;: false, &amp;quot;maxNativeZoom&amp;quot;: 18, &amp;quot;maxZoom&amp;quot;: 18, &amp;quot;minZoom&amp;quot;: 0, &amp;quot;noWrap&amp;quot;: false, &amp;quot;opacity&amp;quot;: 1, &amp;quot;subdomains&amp;quot;: &amp;quot;abc&amp;quot;, &amp;quot;tms&amp;quot;: false} ).addTo(map_d2d98c7d3a1b4162d4b8d810c4765922); &lt;/script&gt;&quot; style=&quot;position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;&quot; allowfullscreen=&quot;&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;btn btn-default output_collapsed&quot; title=&quot;click to expand output&quot; style=&quot;display: none;&quot;&gt;. . .&lt;/div&gt;&lt;/div&gt; . Out[3]:Make this Notebook Trusted to load map: File -&gt; Trust Notebook. . . how to do it with plotly: https://prog.world/how-to-make-an-interactive-map-using-python-and-open-source-libraries/ . data_path = &#39;../../spyder/data/&#39; df_0 = pd.read_csv(&#39;%szaf_general_2020_csv.zip&#39;% data_path) df_1 = pd.read_csv(&#39;%szaf_men_2020_csv.zip&#39;% data_path) df_2 = pd.read_csv(&#39;%szaf_women_2020_csv.zip&#39;% data_path) df = pd.merge(df_0,df_1,how=&#39;left&#39;,on=[&#39;longitude&#39;,&#39;latitude&#39;]) df = pd.merge(df,df_2,how=&#39;left&#39;,on=[&#39;longitude&#39;,&#39;latitude&#39;]) #%% # CRS = EPSG:4326 def create_map(df): gdf_map = gpd.GeoDataFrame(df,geometry = gpd.points_from_xy(df.longitude, df.latitude, crs=&quot;EPSG:4326&quot;)) return gdf_map#.iloc[:,[2,3,4,5]] gdf_0 = create_map(df) #gdf_0.plot() df_0_h = df_0.head(100) df_1_h = df_1.head(100) df_2_h = df_2.head(100) df_h = df.head(100) #%% gdf = gpd.read_file(&#39;%sgeo/zaf_adm_sadb_ocha_20201109_SHP/zaf_admbnda_adm4_sadb_ocha_20201109.shp&#39;% data_path) #gdf = gpd.read_file(&#39;./data/geo/zaf_adm_sadb_ocha_20201109_SHP/zaf_admbndp_admALL_sadb_ocha_itos_20201109.shp&#39;) #gdf.plot() prov = gdf[&#39;ADM1_EN&#39;].drop_duplicates().to_list() gdf_h = gdf.head(2) gdf_kzn = gdf[gdf.ADM1_EN==&#39;KwaZulu-Natal&#39;] #gdf_kzn.plot() #%% def get_prov(gdf,gdf_data): gdf = gdf[gdf.ADM3_EN==&#39;eThekwini&#39;] gdf_prov_1 = gpd.sjoin(gdf,gdf_data) gdf_prov = gpd.sjoin(gdf_data,gdf) return gdf_prov_1,gdf_prov gdf_prov_1,gdf_prov = get_prov(gdf_kzn,gdf_0) #ax= gdf_kzn.boundary.plot() #gdf_prov.plot(ax=ax,column=&#39;zaf_general_2020&#39;) #gdf_prov.plot(column=&#39;zaf_general_2020&#39;) #%% . df_test = gdf_prov[[&#39;longitude&#39;, &#39;latitude&#39;, &#39;zaf_general_2020&#39;, &#39;zaf_men_2020&#39;,&#39;zaf_women_2020&#39;]] #df_test = df_test.drop(columns=&#39;geometry&#39;) chart = alt.Chart(df_test).mark_circle().encode( longitude=&#39;longitude:Q&#39;, latitude=&#39;latitude:Q&#39;, size=alt.value(10), tooltip=&#39;zaf_general_2020&#39; ).project( &quot;mercator&quot; ).properties( width=500, height=400 ) #chart.show() . chart . %%html &lt;div style=&quot;width:100%;&quot;&gt;&lt;div style=&quot;position:relative;width:100%;height:0;padding-bottom:60%;&quot;&gt;&lt;span style=&quot;color:#565656&quot;&gt;Make this Notebook Trusted to load map: File -&amp;gt; Trust Notebook&lt;/span&gt;&lt;iframe src=&quot;about:blank&quot; style=&quot;position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;&quot; data-html=&quot;PCFET0NUWVBFIGh0bWw+CjxoZWFkPiAgICAKICAgIDxtZXRhIGh0dHAtZXF1aXY9ImNvbnRlbnQtdHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PVVURi04IiAvPgogICAgCiAgICAgICAgPHNjcmlwdD4KICAgICAgICAgICAgTF9OT19UT1VDSCA9IGZhbHNlOwogICAgICAgICAgICBMX0RJU0FCTEVfM0QgPSBmYWxzZTsKICAgICAgICA8L3NjcmlwdD4KICAgIAogICAgPHN0eWxlPmh0bWwsIGJvZHkge3dpZHRoOiAxMDAlO2hlaWdodDogMTAwJTttYXJnaW46IDA7cGFkZGluZzogMDt9PC9zdHlsZT4KICAgIDxzdHlsZT4jbWFwIHtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtib3R0b206MDtyaWdodDowO2xlZnQ6MDt9PC9zdHlsZT4KICAgIDxzY3JpcHQgc3JjPSJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL2xlYWZsZXRAMS42LjAvZGlzdC9sZWFmbGV0LmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJodHRwczovL2NvZGUuanF1ZXJ5LmNvbS9qcXVlcnktMS4xMi40Lm1pbi5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9tYXhjZG4uYm9vdHN0cmFwY2RuLmNvbS9ib290c3RyYXAvMy4yLjAvanMvYm9vdHN0cmFwLm1pbi5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvTGVhZmxldC5hd2Vzb21lLW1hcmtlcnMvMi4wLjIvbGVhZmxldC5hd2Vzb21lLW1hcmtlcnMuanMiPjwvc2NyaXB0PgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL2xlYWZsZXRAMS42LjAvZGlzdC9sZWFmbGV0LmNzcyIvPgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL21heGNkbi5ib290c3RyYXBjZG4uY29tL2Jvb3RzdHJhcC8zLjIuMC9jc3MvYm9vdHN0cmFwLm1pbi5jc3MiLz4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iaHR0cHM6Ly9tYXhjZG4uYm9vdHN0cmFwY2RuLmNvbS9ib290c3RyYXAvMy4yLjAvY3NzL2Jvb3RzdHJhcC10aGVtZS5taW4uY3NzIi8+CiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Imh0dHBzOi8vbWF4Y2RuLmJvb3RzdHJhcGNkbi5jb20vZm9udC1hd2Vzb21lLzQuNi4zL2Nzcy9mb250LWF3ZXNvbWUubWluLmNzcyIvPgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9MZWFmbGV0LmF3ZXNvbWUtbWFya2Vycy8yLjAuMi9sZWFmbGV0LmF3ZXNvbWUtbWFya2Vycy5jc3MiLz4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL3B5dGhvbi12aXN1YWxpemF0aW9uL2ZvbGl1bS9mb2xpdW0vdGVtcGxhdGVzL2xlYWZsZXQuYXdlc29tZS5yb3RhdGUubWluLmNzcyIvPgogICAgCiAgICAgICAgICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsCiAgICAgICAgICAgICAgICBpbml0aWFsLXNjYWxlPTEuMCwgbWF4aW11bS1zY2FsZT0xLjAsIHVzZXItc2NhbGFibGU9bm8iIC8+CiAgICAgICAgICAgIDxzdHlsZT4KICAgICAgICAgICAgICAgICNtYXBfMDg5N2VmNTE0YWVlNDlmNTk5NDdkODdlNWNiZTdjODIgewogICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwLjAlOwogICAgICAgICAgICAgICAgICAgIGhlaWdodDogMTAwLjAlOwogICAgICAgICAgICAgICAgICAgIGxlZnQ6IDAuMCU7CiAgICAgICAgICAgICAgICAgICAgdG9wOiAwLjAlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICA8L3N0eWxlPgogICAgICAgIAo8L2hlYWQ+Cjxib2R5PiAgICAKICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb2xpdW0tbWFwIiBpZD0ibWFwXzA4OTdlZjUxNGFlZTQ5ZjU5OTQ3ZDg3ZTVjYmU3YzgyIiA+PC9kaXY+CiAgICAgICAgCjwvYm9keT4KPHNjcmlwdD4gICAgCiAgICAKICAgICAgICAgICAgdmFyIG1hcF8wODk3ZWY1MTRhZWU0OWY1OTk0N2Q4N2U1Y2JlN2M4MiA9IEwubWFwKAogICAgICAgICAgICAgICAgIm1hcF8wODk3ZWY1MTRhZWU0OWY1OTk0N2Q4N2U1Y2JlN2M4MiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY2VudGVyOiBbNDUuNTIzNiwgLTEyMi42NzVdLAogICAgICAgICAgICAgICAgICAgIGNyczogTC5DUlMuRVBTRzM4NTcsCiAgICAgICAgICAgICAgICAgICAgem9vbTogMTAsCiAgICAgICAgICAgICAgICAgICAgem9vbUNvbnRyb2w6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgcHJlZmVyQ2FudmFzOiBmYWxzZSwKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgKTsKCiAgICAgICAgICAgIAoKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgdGlsZV9sYXllcl84NDAwMTllZDdiMDM0ODExYjVlODhlNDU0NDIwYTU3MiA9IEwudGlsZUxheWVyKAogICAgICAgICAgICAgICAgImh0dHBzOi8ve3N9LnRpbGUub3BlbnN0cmVldG1hcC5vcmcve3p9L3t4fS97eX0ucG5nIiwKICAgICAgICAgICAgICAgIHsiYXR0cmlidXRpb24iOiAiRGF0YSBieSBcdTAwMjZjb3B5OyBcdTAwM2NhIGhyZWY9XCJodHRwOi8vb3BlbnN0cmVldG1hcC5vcmdcIlx1MDAzZU9wZW5TdHJlZXRNYXBcdTAwM2MvYVx1MDAzZSwgdW5kZXIgXHUwMDNjYSBocmVmPVwiaHR0cDovL3d3dy5vcGVuc3RyZWV0bWFwLm9yZy9jb3B5cmlnaHRcIlx1MDAzZU9EYkxcdTAwM2MvYVx1MDAzZS4iLCAiZGV0ZWN0UmV0aW5hIjogZmFsc2UsICJtYXhOYXRpdmVab29tIjogMTgsICJtYXhab29tIjogMTgsICJtaW5ab29tIjogMCwgIm5vV3JhcCI6IGZhbHNlLCAib3BhY2l0eSI6IDEsICJzdWJkb21haW5zIjogImFiYyIsICJ0bXMiOiBmYWxzZX0KICAgICAgICAgICAgKS5hZGRUbyhtYXBfMDg5N2VmNTE0YWVlNDlmNTk5NDdkODdlNWNiZTdjODIpOwogICAgICAgIAo8L3NjcmlwdD4=&quot; onload=&quot;this.contentDocument.open();this.contentDocument.write(atob(this.getAttribute(&#39;data-html&#39;)));this.contentDocument.close();&quot; allowfullscreen=&quot;&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt; . Make this Notebook Trusted to load map: File -&gt; Trust Notebook",
            "url": "https://heikoheilgendorff.github.io/adh_data_blog/geo%20data/2022/08/15/folium_test.html",
            "relUrl": "/geo%20data/2022/08/15/folium_test.html",
            "date": " • Aug 15, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Plotting the first COVID-19 infections in South Africa",
            "content": ". Take a quick look at the data . Province District Subdistrict Date of first known confirmed case in province Date of first known confirmed case in district Date of first known confirmed case in sub-district . 0 EASTERN CAPE | ALFRED NZO | MATATIELE | 2020-03-16 | 2020-04-20 | 2020-05-16 | . 1 EASTERN CAPE | ALFRED NZO | MBIZANA | 2020-03-16 | 2020-04-20 | 2020-05-05 | . 2 EASTERN CAPE | ALFRED NZO | NTABANKULU | 2020-03-16 | 2020-04-20 | 2020-04-20 | . 3 EASTERN CAPE | ALFRED NZO | UMZIMVUBU | 2020-03-16 | 2020-04-20 | 2020-04-30 | . 4 EASTERN CAPE | ALFRED NZO | Unallocated | 2020-03-16 | 2020-04-20 | 2020-04-22 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; Interactive Plot . index = (1, len(dates)) interact(timeplot,x = index) . &lt;function __main__.timeplot&gt; . #df = df.drop(columns=[&#39;Prov_date&#39;,&#39;Dist_date&#39;]) merged_data=gdf.merge(df,how= &#39;left&#39;,left_on=&#39;LocalMun_1&#39;,right_on=&#39;Subdistrict&#39;) #merged_data.case = merged_data.case.fillna(0) def timeplot_2(x): date = dates[x]#.strftime(&#39;%x&#39;) print(date) mergetemp = merged_data[merged_data[Date_Name].isin(dates[0:x])] ax = gdf_2.plot(color=&#39;none&#39;,edgecolor=&#39;black&#39;) mergetemp.plot(ax=ax, #column=&#39;case&#39;, color=&#39;red&#39;, #cmap=&#39;Greys&#39;, #edgecolor=&#39;black&#39;, figsize=(25,20), legend = False, legend_kwds={&#39;label&#39;: &quot;Areas with Confirmed COVID-19 cases&quot;,&#39;orientation&#39;: &quot;horizontal&quot;}) ax.axis(&#39;off&#39;) index = (1, len(dates)) interact(timeplot_2,x = index) . &lt;function __main__.timeplot_2&gt; . Ok, so interactive ipython widgets didn&#39;t work.. will need to look into voila. In the meantime, let&#39;s see if we can plot a timeline! . Timeline . import numpy as np import matplotlib.pyplot as plt import matplotlib.dates as mdates # Choose some nice levels levels = np.tile([-9,9,-7,7,-5, 5, -3, 3, -1, 1],int(np.ceil(len(dates)/8)))[:len(dates)] # Create figure and plot a stem plot with the date fig, ax = plt.subplots(figsize=(20, 10), constrained_layout=True) ax.set(title=&quot;New area first infection dates&quot;) ax.vlines(dates, 0, levels, color=&quot;tab:red&quot;) # The vertical stems. ax.plot(dates, np.zeros_like(dates), &quot;-o&quot;,color=&quot;k&quot;, markerfacecolor=&quot;w&quot;) # Baseline and markers on it. # annotate lines names = df.Subdistrict.to_list() for d, l, r in zip(dates, levels, names): ax.annotate(r, xy=(d, l), xytext=(-3, np.sign(l)*3), textcoords=&quot;offset points&quot;, horizontalalignment=&quot;right&quot;, verticalalignment=&quot;bottom&quot; if l &gt; 0 else &quot;top&quot;) # format xaxis with 4 month intervals #ax.xaxis.set_major_locator(mdates.MonthLocator(interval=4)) ax.xaxis.set_major_formatter(mdates.DateFormatter(&quot;%d %b %Y&quot;)) plt.setp(ax.get_xticklabels(), rotation=30, ha=&quot;right&quot;) # remove y axis and spines ax.yaxis.set_visible(False) #ax.spines[&quot;left&quot;, &quot;top&quot;, &quot;right&quot;].set_visible(False) ax.margins(y=0.1) .",
            "url": "https://heikoheilgendorff.github.io/adh_data_blog/jupyter/covid-19/2022/08/14/_covid_first_infections_RSA_tracker.html",
            "relUrl": "/jupyter/covid-19/2022/08/14/_covid_first_infections_RSA_tracker.html",
            "date": " • Aug 14, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Taking a look at some malaria data",
            "content": "import pandas as pd import requests import json import matplotlib.pyplot as plt import math . Get the data . The data can be found on ckan here. . _id IndicatorCode Indicator ValueType 0 1 MALARIA_EST_DEATHS Estimated number of malaria deaths text 1 2 MALARIA_EST_DEATHS Estimated number of malaria deaths text 2 3 MALARIA_EST_DEATHS Estimated number of malaria deaths text 3 4 MALARIA_EST_DEATHS Estimated number of malaria deaths text 4 5 MALARIA_EST_DEATHS Estimated number of malaria deaths text 5 6 MALARIA_EST_DEATHS Estimated number of malaria deaths text 6 7 MALARIA_EST_DEATHS Estimated number of malaria deaths text 7 8 MALARIA_EST_DEATHS Estimated number of malaria deaths text 8 9 MALARIA_EST_DEATHS Estimated number of malaria deaths text 9 10 MALARIA_EST_DEATHS Estimated number of malaria deaths text ParentLocationCode ParentLocation Location type SpatialDimValueCode 0 AMR Americas Country BLZ 1 SEAR South-East Asia Country BTN 2 AFR Africa Country CPV 3 AMR Americas Country CRI 4 SEAR South-East Asia Country PRK 5 AFR Africa Country SWZ 6 AMR Americas Country GTM 7 AMR Americas Country MEX 8 SEAR South-East Asia Country NPL 9 AMR Americas Country NIC Location Period type ... FactValueUoM 0 Belize Year ... 1 Bhutan Year ... 2 Cabo Verde Year ... 3 Costa Rica Year ... 4 Democratic People&#39;s Republic of Korea Year ... 5 Eswatini Year ... 6 Guatemala Year ... 7 Mexico Year ... 8 Nepal Year ... 9 Nicaragua Year ... FactValueNumericLowPrefix FactValueNumericLow FactValueNumericHighPrefix 0 NaN 1 NaN 2 NaN 3 NaN 4 NaN 5 NaN 6 NaN 7 NaN 8 NaN 9 NaN FactValueNumericHigh Value FactValueTranslationID FactComments Language 0 NaN 0 EN 1 NaN 0 EN 2 NaN 0 EN 3 NaN 0 EN 4 NaN 0 EN 5 NaN 0 EN 6 NaN 0 EN 7 NaN 0 EN 8 NaN 0 EN 9 NaN 0 EN DateModified 0 2022-02-02T22:00:00 1 2022-02-02T22:00:00 2 2022-02-02T22:00:00 3 2022-02-02T22:00:00 4 2022-02-02T22:00:00 5 2022-02-02T22:00:00 6 2022-02-02T22:00:00 7 2022-02-02T22:00:00 8 2022-02-02T22:00:00 9 2022-02-02T22:00:00 [10 rows x 35 columns] . As we can see, there are a lot of columns in this dataset. We are also only interested in African countries, so we can select the countries and columns as follows. . df = df[df.ParentLocation==&#39;Africa&#39;] cols = [&#39;SpatialDimValueCode&#39;, &#39;Location&#39;,&#39;Indicator&#39;,&#39;Period&#39;,&#39;FactValueNumeric&#39;,&#39;FactValueNumericLow&#39;,&#39;FactValueNumericHigh&#39;,&#39;DateModified&#39;] df = df.loc[:,cols] print(df.head(10)) . SpatialDimValueCode Location 2 CPV Cabo Verde 5 SWZ Eswatini 12 STP Sao Tome and Principe 18 BEN Benin 19 GIN Guinea 20 COM Comoros 22 GHA Ghana 23 TCD Chad 24 KEN Kenya 27 CMR Cameroon Indicator Period FactValueNumeric 2 Estimated number of malaria deaths 2020 0.0 5 Estimated number of malaria deaths 2020 0.0 12 Estimated number of malaria deaths 2020 0.0 18 Estimated number of malaria deaths 2020 10123.0 19 Estimated number of malaria deaths 2020 10215.0 20 Estimated number of malaria deaths 2020 11.0 22 Estimated number of malaria deaths 2020 12084.0 23 Estimated number of malaria deaths 2020 12415.0 24 Estimated number of malaria deaths 2020 12646.0 27 Estimated number of malaria deaths 2020 14841.0 FactValueNumericLow FactValueNumericHigh DateModified 2 NaN NaN 2022-02-02T22:00:00 5 NaN NaN 2022-02-02T22:00:00 12 NaN NaN 2022-02-02T22:00:00 18 8420.0 12600.0 2022-02-02T22:00:00 19 7760.0 12700.0 2022-02-02T22:00:00 20 0.0 18.0 2022-02-02T22:00:00 22 11200.0 13300.0 2022-02-02T22:00:00 23 9340.0 16600.0 2022-02-02T22:00:00 24 11400.0 14800.0 2022-02-02T22:00:00 27 12300.0 18200.0 2022-02-02T22:00:00 . df_kenya = df[df.Location==&#39;Kenya&#39;] df_kenya.plot(x=&#39;Period&#39;,y=[&#39;FactValueNumeric&#39;,&#39;FactValueNumericLow&#39;,&#39;FactValueNumericHigh&#39;],figsize=(15,8)) x = df_kenya.Period.to_list() new_list = range(math.floor(min(x)), math.ceil(max(x))+1) plt.xticks(new_list) plt.show() .",
            "url": "https://heikoheilgendorff.github.io/adh_data_blog/jupyter/malaria/2022/08/14/_08_11_Malaria_Blog_Post.html",
            "relUrl": "/jupyter/malaria/2022/08/14/_08_11_Malaria_Blog_Post.html",
            "date": " • Aug 14, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Exploring the High Resolution Population Density Dataset from Meta",
            "content": "The csv file is considerably smaller than the tif file, so let&#39;s begin with that. The first thing we need to do is convert it from a simple csv to geojson in order to be able to map it. . The tif file is very big - around 21GB when unzipped. This is too big for most machines to handle in Python, and you would be better off using a decidicated mapping tool like QGIS. As such, we should rather look to use the csv file, which is much smaller. However, first we should confirm that the data is the same. To do that, we select only a small part of the tif file and compare it with the same area in the csv file. . with rasterio.open(&#39;zip:///%szaf_women_2020_geotiff.zip!/zaf_women_2020.tif&#39;%data_path) as src: n = 500 data = src.read(1, window=Window(0, 0, n, n)) print(&#39;Band1 has shape&#39;, data.shape) height = data.shape[0] width = data.shape[1] cols, rows = np.meshgrid(np.arange(width), np.arange(height)) xs, ys = rasterio.transform.xy(src.transform, rows, cols) lons= np.array(xs) lats = np.array(ys) print(&#39;lons shape&#39;, lons.shape) . Band1 has shape (500, 500) lons shape (500, 500) . Now we have a subset of the tif file, but in order to be able to compare it with the csv file, we need to convert both into geopandas dataframes. To do that, we need to change the shape of the tif file&#39;s data. . lons2 = lons.flatten() lats2 = lats.flatten() data2 = data.flatten() data_df = pd.DataFrame({&#39;pop_dens&#39;:data2,&#39;latitude&#39;:lats2,&#39;longitude&#39;:lons2}).dropna() data_gdf = gpd.GeoDataFrame(data_df.pop_dens, geometry=gpd.points_from_xy(data_df.longitude, data_df.latitude, crs=&quot;EPSG:4326&quot;)) lon_min= data_df.longitude.min() lon_max = data_df.longitude.max() lat_min= data_df.latitude.min() lat_max = data_df.latitude.max() . gdf_box = gpd.read_file(&#39;%szaf_women_2020_csv_geo.geojson&#39;%data_path,bbox=(lon_min, lat_min, lon_max, lat_max)) . Right, let&#39;s take a look at the subset of the tif data. We can also zoom in to see that each point in the tif file is a square pixel. . plt.style.use(&quot;dark_background&quot;) data = np.nan_to_num(data) fg_color = &#39;white&#39; bg_color = &#39;black&#39; fig = plt.figure(figsize=(20,10)) ax1 = fig.add_subplot(121) plt.imshow(data) ax1.set_title(&#39;Plot of tif file&#39;, color=&#39;white&#39;) # set figure facecolor fig.patch.set_facecolor(&#39;black&#39;) # set tick and ticklabel color ax1.axes.tick_params(color=fg_color, labelcolor=fg_color) ax2 = fig.add_subplot(122) plt.imshow(data) plt.xlim(150,180) plt.ylim(180,150) ax2.set_title(&#39;Zoomed&#39;, color=&#39;white&#39;) # set tick and ticklabel color ax2.axes.tick_params(color=fg_color, labelcolor=fg_color) # set imshow outline for spine in ax1.axes.spines.values(): spine.set_edgecolor(fg_color) for spine in ax2.axes.spines.values(): spine.set_edgecolor(fg_color) fig.tight_layout() . Now let&#39;s compare the two geodataframes of the csv and tif subsets. Once again, we show a zoomed in image on the right. Bearing in mind that the tif data has been converted from a pixel to a point, we note that the two datasets place their points on opposite corners of the pixel. This is not a concern as both points represent the same pixel. . fg_color = &#39;white&#39; bg_color = &#39;black&#39; plt.style.use(&quot;dark_background&quot;) fig = plt.figure(figsize=(20,10)) ax1 = fig.add_subplot(121) gdf_box.plot(ax=ax1,label=&#39;csv&#39;) data_gdf.plot(ax=ax1,color=&#39;red&#39;,alpha=0.8, markersize=7,label=&#39;tif&#39;) ax1.set_title(&#39;Points from both datasets&#39;,color=fg_color) # set figure facecolor fig.patch.set_facecolor(&#39;black&#39;) # set tick and ticklabel color ax1.axes.tick_params(color=fg_color, labelcolor=fg_color) plt.legend() ax2 = fig.add_subplot(122) gdf_box.plot(ax=ax2,label=&#39;csv&#39;) data_gdf.plot(ax=ax2,color=&#39;red&#39;,alpha=0.8, markersize=7,label=&#39;tif&#39;) ax2.set_xlim(16.04,16.048) ax2.set_ylim(-22.050,-22.044) #ax2.set_ylim(-22.2044,-22.050) ax2.set_title(&#39;Zoomed&#39;,color=fg_color) # set tick and ticklabel color ax2.axes.tick_params(color=fg_color, labelcolor=fg_color) plt.legend() fig.tight_layout() . We have now determined that the csv and tif data refer to the same thing. As such, it is safe for us to continue our analysis using only the csv data. .",
            "url": "https://heikoheilgendorff.github.io/adh_data_blog/geo%20data/population%20density/2022/08/12/geo-data-prep-tutorial.html",
            "relUrl": "/geo%20data/population%20density/2022/08/12/geo-data-prep-tutorial.html",
            "date": " • Aug 12, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Taking a look at some malaria data using Altair",
            "content": "import altair as alt import pandas as pd import requests import json import matplotlib.pyplot as plt import math . Get the data . The data can be found on ckan here. . _id IndicatorCode Indicator ValueType 0 1 MALARIA_EST_DEATHS Estimated number of malaria deaths text 1 2 MALARIA_EST_DEATHS Estimated number of malaria deaths text 2 3 MALARIA_EST_DEATHS Estimated number of malaria deaths text 3 4 MALARIA_EST_DEATHS Estimated number of malaria deaths text 4 5 MALARIA_EST_DEATHS Estimated number of malaria deaths text 5 6 MALARIA_EST_DEATHS Estimated number of malaria deaths text 6 7 MALARIA_EST_DEATHS Estimated number of malaria deaths text 7 8 MALARIA_EST_DEATHS Estimated number of malaria deaths text 8 9 MALARIA_EST_DEATHS Estimated number of malaria deaths text 9 10 MALARIA_EST_DEATHS Estimated number of malaria deaths text ParentLocationCode ParentLocation Location type SpatialDimValueCode 0 AMR Americas Country BLZ 1 SEAR South-East Asia Country BTN 2 AFR Africa Country CPV 3 AMR Americas Country CRI 4 SEAR South-East Asia Country PRK 5 AFR Africa Country SWZ 6 AMR Americas Country GTM 7 AMR Americas Country MEX 8 SEAR South-East Asia Country NPL 9 AMR Americas Country NIC Location Period type ... FactValueUoM 0 Belize Year ... 1 Bhutan Year ... 2 Cabo Verde Year ... 3 Costa Rica Year ... 4 Democratic People&#39;s Republic of Korea Year ... 5 Eswatini Year ... 6 Guatemala Year ... 7 Mexico Year ... 8 Nepal Year ... 9 Nicaragua Year ... FactValueNumericLowPrefix FactValueNumericLow FactValueNumericHighPrefix 0 NaN 1 NaN 2 NaN 3 NaN 4 NaN 5 NaN 6 NaN 7 NaN 8 NaN 9 NaN FactValueNumericHigh Value FactValueTranslationID FactComments Language 0 NaN 0 EN 1 NaN 0 EN 2 NaN 0 EN 3 NaN 0 EN 4 NaN 0 EN 5 NaN 0 EN 6 NaN 0 EN 7 NaN 0 EN 8 NaN 0 EN 9 NaN 0 EN DateModified 0 2022-02-02T22:00:00 1 2022-02-02T22:00:00 2 2022-02-02T22:00:00 3 2022-02-02T22:00:00 4 2022-02-02T22:00:00 5 2022-02-02T22:00:00 6 2022-02-02T22:00:00 7 2022-02-02T22:00:00 8 2022-02-02T22:00:00 9 2022-02-02T22:00:00 [10 rows x 35 columns] . As we can see, there are a lot of columns in this dataset. We are also only interested in African countries, so we can select the countries and columns as follows. . df = df[df.ParentLocation==&#39;Africa&#39;] cols = [&#39;SpatialDimValueCode&#39;, &#39;Location&#39;,&#39;Indicator&#39;,&#39;Period&#39;,&#39;FactValueNumeric&#39;,&#39;FactValueNumericLow&#39;,&#39;FactValueNumericHigh&#39;,&#39;DateModified&#39;] df = df.loc[:,cols] print(df.head(10)) . SpatialDimValueCode Location 2 CPV Cabo Verde 5 SWZ Eswatini 12 STP Sao Tome and Principe 18 BEN Benin 19 GIN Guinea 20 COM Comoros 22 GHA Ghana 23 TCD Chad 24 KEN Kenya 27 CMR Cameroon Indicator Period FactValueNumeric 2 Estimated number of malaria deaths 2020 0.0 5 Estimated number of malaria deaths 2020 0.0 12 Estimated number of malaria deaths 2020 0.0 18 Estimated number of malaria deaths 2020 10123.0 19 Estimated number of malaria deaths 2020 10215.0 20 Estimated number of malaria deaths 2020 11.0 22 Estimated number of malaria deaths 2020 12084.0 23 Estimated number of malaria deaths 2020 12415.0 24 Estimated number of malaria deaths 2020 12646.0 27 Estimated number of malaria deaths 2020 14841.0 FactValueNumericLow FactValueNumericHigh DateModified 2 NaN NaN 2022-02-02T22:00:00 5 NaN NaN 2022-02-02T22:00:00 12 NaN NaN 2022-02-02T22:00:00 18 8420.0 12600.0 2022-02-02T22:00:00 19 7760.0 12700.0 2022-02-02T22:00:00 20 0.0 18.0 2022-02-02T22:00:00 22 11200.0 13300.0 2022-02-02T22:00:00 23 9340.0 16600.0 2022-02-02T22:00:00 24 11400.0 14800.0 2022-02-02T22:00:00 27 12300.0 18200.0 2022-02-02T22:00:00 . df_kenya = df[df.Location==&#39;Kenya&#39;] . title = alt.TitleParams(&#39;Estimated number of deaths due to Malaria in Kenya&#39;, anchor=&#39;middle&#39;) line = alt.Chart(df_kenya,title=title).mark_line().encode( alt.X(&#39;Period:O&#39;,title=&#39;Year&#39;), # :O tells altair that the data is ordinal alt.Y(&#39;FactValueNumeric&#39;,title=&#39;Number of Deaths&#39;)) point = alt.Chart(df_kenya).mark_area(opacity=0.3).encode( alt.X(&#39;Period:O&#39;), alt.Y(&#39;FactValueNumericLow&#39;), alt.Y2(&#39;FactValueNumericHigh&#39;), tooltip=[&#39;Period&#39;,&#39;FactValueNumericLow&#39;,&#39;FactValueNumeric&#39;,&#39;FactValueNumericHigh&#39;]) .",
            "url": "https://heikoheilgendorff.github.io/adh_data_blog/jupyter/malaria/2022/08/12/Malaria_blog_post_altair.html",
            "relUrl": "/jupyter/malaria/2022/08/12/Malaria_blog_post_altair.html",
            "date": " • Aug 12, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Plotting data from github repo",
            "content": ". First attempt at reading some data . Let&#39;s take a look at some sample data from Our World in Data. . df.head() . End .",
            "url": "https://heikoheilgendorff.github.io/adh_data_blog/jupyter/2022/06/08/test_2.html",
            "relUrl": "/jupyter/2022/06/08/test_2.html",
            "date": " • Jun 8, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "My First Attempt at Interactive Plots",
            "content": ". Interactive plots . Take a quick look at the data . df.head() . Title US_Gross Worldwide_Gross US_DVD_Sales Production_Budget Release_Date MPAA_Rating Running_Time_min Distributor Source Major_Genre Creative_Type Director Rotten_Tomatoes_Rating IMDB_Rating IMDB_Votes . 0 The Land Girls | 146083.0 | 146083.0 | NaN | 8000000.0 | Jun 12 1998 | R | NaN | Gramercy | None | None | None | None | NaN | 6.1 | 1071.0 | . 1 First Love, Last Rites | 10876.0 | 10876.0 | NaN | 300000.0 | Aug 07 1998 | R | NaN | Strand | None | Drama | None | None | NaN | 6.9 | 207.0 | . 2 I Married a Strange Person | 203134.0 | 203134.0 | NaN | 250000.0 | Aug 28 1998 | None | NaN | Lionsgate | None | Comedy | None | None | NaN | 6.8 | 865.0 | . 3 Let&#39;s Talk About Sex | 373615.0 | 373615.0 | NaN | 300000.0 | Sep 11 1998 | None | NaN | Fine Line | None | Comedy | None | None | 13.0 | NaN | NaN | . 4 Slam | 1009819.0 | 1087521.0 | NaN | 1000000.0 | Oct 09 1998 | R | NaN | Trimark | Original Screenplay | Drama | Contemporary Fiction | None | 62.0 | 3.4 | 165.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) . alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, #tooltip=&#39;Title:N&#39;, tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;], opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Look at all the data without filters . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;,&#39;Major_Genre:N&#39;] ).properties( width=500, height=400 ) .",
            "url": "https://heikoheilgendorff.github.io/adh_data_blog/2022/06/08/first_plot.html",
            "relUrl": "/2022/06/08/first_plot.html",
            "date": " • Jun 8, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://heikoheilgendorff.github.io/adh_data_blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post8": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://heikoheilgendorff.github.io/adh_data_blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://heikoheilgendorff.github.io/adh_data_blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://heikoheilgendorff.github.io/adh_data_blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}